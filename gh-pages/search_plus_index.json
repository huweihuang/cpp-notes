{"./":{"url":"./","title":"序言","keywords":"","body":"C++ 学习笔记 本系列是 C++ 学习笔记 更多的学习笔记请参考： Kubernetes 学习笔记 Golang 学习笔记 Linux 学习笔记 数据结构学习笔记 个人博客：www.huweihuang.com 目录 前言 序言 基础篇 基本语法 数据类型 流程语句 面相对象编程 类和方法 继承和多态 接口 赞赏 如果觉得文章有帮助的话，可以打赏一下，谢谢！ Copyright © www.huweihuang.com 2017-2018 all right reserved，powered by GitbookUpdated at 2023-03-05 20:18:39 "},"basics/cpp-basics.html":{"url":"basics/cpp-basics.html","title":"基本语法","keywords":"","body":"[TOC] 1. 简介 C++ 是一种静态类型的、编译式的、通用的、大小写敏感的、不规则的编程语言，支持过程化编程、面向对象编程和泛型编程。 1.1. 特点 C++ 完全支持面向对象的程序设计，包括面向对象开发的四大特性： 封装 抽象 继承 多态 2. 基本语法 C++ 程序可以定义为对象的集合，这些对象通过调用彼此的方法进行交互。 对象 - 对象具有状态和行为。例如：一只狗的状态 - 颜色、名称、品种，行为 - 摇动、叫唤、吃。对象是类的实例。 类 - 类可以定义为描述对象行为/状态的模板/蓝图。 方法 - 从基本上说，一个方法表示一种行为。一个类可以包含多个方法。可以在方法中写入逻辑、操作数据以及执行所有的动作。 即时变量 - 每个对象都有其独特的即时变量。对象的状态是由这些即时变量的值创建的。 2.1. 程序结构 #include // 头文件 using namespace std; // 告诉编译器使用 std 命名空间 int main() // main() 是程序开始执行的地方 { cout 2.2. main入口函数 main() 函数是 C++ 程序的入口函数，C++ 标准规定 main() 函数的返回值类型为 int，返回值用于表示程序的退出状态，返回 0 表示程序正常退出，返回非 0，表示出现异常。C++ 标准规定，main() 函数原型有两种： //第一种 int main(); //第二种 int main(int argc，char* argv[]); int main(int argc，char** argv); 2.3. 编译和执行 $ g++ hello.cpp $ ./a.out Hello World 2.4. 标准输入输出 iostream标准库，提供IO相关的操作，包括： 标准输入：cin 标准输出：cout 标准错误：cerr 一般日志：clog 示例： # include int main() { std::cout > v1 >> v2; std::cout 2.5. 注释 单行注释 // 这是单行注释 多行注释 /* 这是注释 */ /* C++ 注释也可以 * 跨行 */ 2.6. 标识符 C++ 标识符是用来标识变量、函数、类、模块，或任何其他用户自定义项目的名称。 一个标识符以字母 A-Z 或 a-z 或下划线 _ 开始，后跟零个或多个字母、下划线和数字（0-9）。 C++ 标识符内不允许出现标点字符，比如 @、& 和 %。C++ 是区分大小写的编程语言。 3. 关键字 asm else new this auto enum operator throw bool explicit private true break export protected try case extern public typedef catch false register typeid char float reinterpret_cast typename class for return union const friend short unsigned const_cast goto signed using continue if sizeof virtual default inline static void delete int static_cast volatile do long struct wchar_t double mutable switch while dynamic_cast namespace template - 完整关键字介绍可查阅：C++ 的关键字（保留字）完整介绍 4. 头文件 C++程序中通常包含两类文件，.cpp文件为c++的源文件，.h文件为c++的头文件。 头文件用来存储需要被调用的类、变量及函数声明（仅包含入参出参，不包含函数实现定义）。 通过#include将头文件的内容给源文件引用。 例子： math.cpp /* math.cpp */ double f1() { //do something here.... return; } double f2(double a) { //do something here... return a * a; } /* end of math.cpp */ 头文件math.h /* math.h */ double f1(); double f2(double); /* end of math.h */ 源文件main.cpp /* main.cpp */ #include \"math.h\" // 引入头文件 main() { int number1 = f1(); int number2 = f2(number1); } /* end of main.cpp */ 5. C++谷歌代码规范 具体参考：Google C++ Style Guide 参考： https://www.tutorialspoint.com/cplusplus/index.htm https://www.runoob.com/cplusplus/cpp-tutorial.html 理解 C++ 中的头文件和源文件的作用 | 菜鸟教程 Copyright © www.huweihuang.com 2017-2018 all right reserved，powered by GitbookUpdated at 2023-03-05 20:18:39 "},"basics/cpp-data-type.html":{"url":"basics/cpp-data-type.html","title":"数据类型","keywords":"","body":"数据类型 1. 变量 1.1. 变量定义 1.1.1. 变量声明 ; type：表示声明变量的数据类型。 variable_list：表示变量的名字，可以多个，以逗号分隔，分号结束。 变量命名规范： 变量名一般使用小写 用户自定义的类用一般用大写字母开头 多个单词用下划线或驼峰格式 例如： int i, j, k; char c, ch; float f, salary; double d; 1.1.2. 声明并初始化 = ; 例如： extern int d = 3, f = 5; // d 和 f 的声明 int d = 3, f = 5; // 定义并初始化 d 和 f byte z = 22; // 定义并初始化 z char x = 'x'; // 变量 x 的值为 'x' 1.1.3. 变量的作用域 变量的作用域大多用花括号分隔，建议当你第一次使用变量的时候再定义它。 全局变量：所有花括号之外 局部变量：花括号之内 嵌套作用域：内部同名变量会覆盖外部同名变量 1.2. 变量类型 类型 关键字 其他类型 布尔型 bool 字符型 char 整型 int short 短整型，long 长整型，long long 长整型 浮点型 float 双浮点型 double long double拓展精度浮点数 空类型 void 宽字符型 wchar_t 1.2.1. 整型 使用int执行整数运算。如果超过int的范围，则使用long long类型。 1.2.2. 浮点型 单精度float，32bit表示，双精度double，64bit表示。浮点运算选择double类型，因为float会精度不够，而单精度和双精度计算代价相差无几。 1.2.3. 布尔型 1.2.4. 字符型 1.3. 变量作用域 1.3.1. 全局变量 全局变量：函数外定义的变量。全局变量表示整个程序都可以使用的变量。 1.3.2. 局部变量 局部变量：函数内定义的变量。函数内同名的局部变量会覆盖全局变量。 2. 常量 2.1. 定义常量 常量名字一般定义为全大写单词 使用 #define 预处理器。 // define格式 #define identifier value // 例如 #define LENGTH 10 #define WIDTH 5 #define NEWLINE '\\n' 使用 const 关键字。 // const格式 const type variable = value; // 例如 #include using namespace std; int main() { const int LENGTH = 10; const int WIDTH = 5; const char NEWLINE = '\\n'; int area; area = LENGTH * WIDTH; cout 3. 复合类型 3.0. 命名空间的using声明 使用到的库函数一般属于某个命名空间下，例如std::cin属于命名空间std，通过作用域操作符::来引用。也可以使用using声明，则调用时无需添加前缀。 using namespace::name; 每个名字都需要独立的using声明 using std::cin; using std::cout; using std::endl; int main(){ cout > v1 >> v2; } 头文件不包含using声明 头文件一般不使用using声明，避免名字冲突。 3.1. 数组 数据的大小是固定的，不能无限向数据添加元素。 3.2. 字符串string 3.3. 向量Vector 标准库类型vector表示对象的集合，其中对象的类型都相同。 使用vector，先做声明： #include ; using std::vector; 3.3. 指针 指针的定义 指针是指向另一种类型的复合类型，本身是一个对象，可以被赋值和拷贝。指针无需在定义时赋值。通过*来定义指针。 int *p1, *p2; // p1，p2都是指向int类型的指针 获取对象的地址 指针存放某个对象的地址，使用取地址符（&）获取该地址。 int ival=42; int *p=&ival; // p存放 ival的地址 指针的值 指针的值（即地址）应属于下列四种状态之一： 指向某个对象 指定紧邻对象所占空间的下一个位置 空指针，没有指向任何对象 无效指针，即上述情况之外 空指针 空指针不指向任何对象，在使用指针之前应检查该指针是否为空，生成空指针的方式有： int *p1=nullptr; // c++11新引入的方式，建议使用该方式 int *p2=0; int *p3=NULL; 建议初始化所有指针，避免访问空指针导致程序崩溃。 赋值和指针 给指针赋值就是令他存放一个新的地址，指向一个新的对象。 指针的指针 指针也有内存地址，因此指针的指针表示指针的内存地址。 3.4. 引用 引用为对象起了另外的名字，通过&d的格式来定义引用类型。引用并非对象，而是对象的别名。 int ival = 1024; int &refVal = ival; // refVal是ival另外的名字 3.5. 结构体(struct) struct Sales_data{ std::string bookNo; unsigned units_sold=0; double revenue =0.0; }; 4. 特殊类型 参考： https://www.tutorialspoint.com/cplusplus/index.htm https://www.runoob.com/cplusplus/cpp-tutorial.html Copyright © www.huweihuang.com 2017-2018 all right reserved，powered by GitbookUpdated at 2023-03-05 20:18:39 "},"basics/cpp-flow-control.html":{"url":"basics/cpp-flow-control.html","title":"流程语句","keywords":"","body":"流程语句 1. 判断语句 1.1. if-else 格式 if(boolean_expression) { // 如果布尔表达式为真将执行的语句 } else { // 如果布尔表达式为假将执行的语句 } 示例 // 检查布尔条件 if( a 2. 循环语句 2.1. for 格式 for ( init; condition; increment ) { statement(s); } 示例 // for 循环执行 for( int a = 10; a 2.2. while 格式 while(condition) { statement(s); } 示例 // while 循环执行 while( a 2.3. do...while 格式 do { statement(s); }while( condition ); 示例 // do 循环执行 do { cout 2.4. break&continue break：跳出整个循环，执行循环后的语句。 continue：跳出当前循环，执行下一个循环。 3. 选择语句 3.1. switch 格式 switch(expression){ case constant-expression : statement(s); break; // 可选的 case constant-expression : statement(s); break; // 可选的 // 您可以有任意数量的 case 语句 default : // 可选的 statement(s); } 示例 switch(grade) { case 'A' : cout 参考： https://www.tutorialspoint.com/cplusplus/index.htm https://www.runoob.com/cplusplus/cpp-tutorial.html Copyright © www.huweihuang.com 2017-2018 all right reserved，powered by GitbookUpdated at 2023-03-05 20:18:39 "},"oop/cpp-class.html":{"url":"oop/cpp-class.html","title":"类和方法","keywords":"","body":"1. 函数 1.1. 定义 return_type function_name( parameter list ) { body of the function } 示例 // 函数返回两个数中较大的那个数 int max(int num1, int num2) { // 局部变量声明 int result; if (num1 > num2) result = num1; else result = num2; return result; } 2. 类 2.1. 属性 class Box { // 公有的属性，类外部可以通过`.`的符号来访问 public: double length; void setWidth( double wid ); double getWidth( void ); // 私有属性，类外部不能访问，也不能被派生类访问，可以通过类的get方法访问 private: double width; // 保护属性，保护属性可以被本类和派生的子类访问 protected: double height; }; 2.2. 方法 内联的方式，定义在类的内部。 class Box { public: double length; // 长度 double breadth; // 宽度 double height; // 高度 double getVolume(void) // 公有的方法 { return length * breadth * height; } }; 通过范围解析符 :: 来定义 double Box::getVolume(void) { return length * breadth * height; } 调用方法 // 创建一个对象 Box myBox; // 调用该对象的成员函数 myBox.getVolume(); ::和->的使用 c++中如果定义的类对象是指针对象的时候，用->来指向类中的成员；如果类对象是一般对象则用.来指向类中的成员。 class A {　　 public play(); } A *p则使用：p->play(); // 左边是结构指针。 A p 则使用：p.paly(); // 左边是结构变量。 ::域操作符的用法 在类外部声明成员函数。void A::Print(){}; 2.3. 构造函数 类的构造函数是类的一种特殊的成员函数，它会在每次创建类的新对象时执行。 构造函数的名称与类的名称是完全相同的，并且不会返回任何类型，也不会返回 void。构造函数可用于为某些成员变量设置初始值。 #include using namespace std; class Line { public: void setLength( double len ); double getLength( void ); Line(double len); // 这是构造函数 private: double length; }; // 成员函数定义，包括构造函数 Line::Line( double len) { cout 2.4. 析构函数 类的析构函数是类的一种特殊的成员函数，它会在每次删除所创建的对象时执行。 析构函数的名称与类的名称是完全相同的，只是在前面加了个波浪号（~）作为前缀，它不会返回任何值，也不能带有任何参数。析构函数有助于在跳出程序（比如关闭文件、释放内存等）前释放资源。 #include using namespace std; class Line { public: void setLength( double len ); double getLength( void ); Line(); // 这是构造函数声明 ~Line(); // 这是析构函数声明 private: double length; }; // 成员函数定义，包括构造函数 Line::Line(void) { cout 参考： https://www.tutorialspoint.com/cplusplus/index.htm https://www.runoob.com/cplusplus/cpp-tutorial.html Copyright © www.huweihuang.com 2017-2018 all right reserved，powered by GitbookUpdated at 2023-03-05 20:18:39 "},"oop/cpp-polymorphism.html":{"url":"oop/cpp-polymorphism.html","title":"继承和多态","keywords":"","body":"1. 继承 1.1. 继承定义 格式 class : 示例 #include using namespace std; // 父类 class Shape { public: void setWidth(int w) { width = w; } void setHeight(int h) { height = h; } protected: int width; int height; }; // 派生类继承父类的public和protectd的属性 class Rectangle: public Shape { public: int getArea() { return (width * height); } }; int main(void) { Rectangle Rect; Rect.setWidth(5); Rect.setHeight(7); // 输出对象的面积 cout 1.2. 访问控制和继承 访问权限总结 访问 public protected private 同一个类 yes yes yes 派生类 yes yes no 外部的类 yes no no Public：所有类都可以访问 protected：自身类和派生类可以访问 private：只有自身类可以访问 1.3. 继承类型 继承类型可以为public、protected 或 private 三种，但一般使用public方式继承。 三者差别如下： 公有继承（public）：当一个类派生自公有基类时，基类的公有成员也是派生类的公有成员，基类的保护成员也是派生类的保护成员，基类的私有成员不能直接被派生类访问，但是可以通过调用基类的公有和保护成员来访问。 保护继承（protected）： 当一个类派生自保护基类时，基类的公有和保护成员将成为派生类的保护成员。 私有继承（private）：当一个类派生自私有基类时，基类的公有和保护成员将成为派生类的私有成员。 1.4. 多继承 多继承即一个子类可以有多个父类，它继承了多个父类的特性。 格式 class :,,… { }; 示例 #include using namespace std; // 基类 Shape class Shape { public: void setWidth(int w) { width = w; } void setHeight(int h) { height = h; } protected: int width; int height; }; // 基类 PaintCost class PaintCost { public: int getCost(int area) { return area * 70; } }; // 派生类 class Rectangle: public Shape, public PaintCost { public: int getArea() { return (width * height); } }; int main(void) { Rectangle Rect; int area; Rect.setWidth(5); Rect.setHeight(7); area = Rect.getArea(); // 输出对象的面积 cout 2. 多态 多态按字面的意思就是多种形态。当类之间存在层次结构，并且类之间是通过继承关联时，就会用到多态。 C++ 多态意味着调用成员函数时，会根据调用函数的对象的类型来执行不同的函数。 #include using namespace std; class Shape { protected: int width, height; public: Shape( int a=0, int b=0) { width = a; height = b; } // 虚函数，子类可以根据自己的需求，实现不同的内容，即多态的实现 virtual int area() { cout area(); // 存储三角形的地址 shape = &tri; // 调用三角形的求面积函数 area shape->area(); return 0; } 输出结果 Rectangle class area Triangle class area 2.1. 虚函数 虚函数 是在基类中使用关键字 virtual 声明的函数。在派生类中重新定义基类中定义的虚函数时，会告诉编译器不要静态链接到该函数。 我们想要的是在程序中任意点可以根据所调用的对象类型来选择调用的函数，这种操作被称为动态链接，或后期绑定。 class Shape { protected: int width, height; public: Shape( int a=0, int b=0) { width = a; height = b; } // 虚函数，子类可以根据自己的需求，实现不同的内容 virtual int area() { cout 2.2. 纯虚函数 纯虚函数即虚函数没有具体的函数主体实现，只是一个声明。 class Shape { protected: int width, height; public: Shape( int a=0, int b=0) { width = a; height = b; } // pure virtual function virtual int area() = 0; }; = 0告诉编译器，函数没有主体，上面的虚函数是纯虚函数。 参考： https://www.tutorialspoint.com/cplusplus/index.htm https://www.runoob.com/cplusplus/cpp-tutorial.html Copyright © www.huweihuang.com 2017-2018 all right reserved，powered by GitbookUpdated at 2023-03-05 20:18:39 "},"oop/cpp-interface.html":{"url":"oop/cpp-interface.html","title":"接口","keywords":"","body":"接口(抽象类) 接口描述了类的行为和功能，而不需要完成类的特定实现。 C++ 接口是使用抽象类来实现的，如果类中至少有一个函数被声明为纯虚函数，则这个类就是抽象类。 class Box { public: // 纯虚函数 virtual double getVolume() = 0; private: double length; // 长度 double breadth; // 宽度 double height; // 高度 }; 示例如下： #include using namespace std; // 基类 class Shape { public: // 提供接口框架的纯虚函数 virtual int getArea() = 0; void setWidth(int w) { width = w; } void setHeight(int h) { height = h; } protected: int width; int height; }; // 派生类 class Rectangle: public Shape { public: int getArea() { return (width * height); } }; class Triangle: public Shape { public: int getArea() { return (width * height)/2; } }; int main(void) { Rectangle Rect; Triangle Tri; Rect.setWidth(5); Rect.setHeight(7); // 输出对象的面积 cout 参考： https://www.tutorialspoint.com/cplusplus/index.htm https://www.runoob.com/cplusplus/cpp-tutorial.html Copyright © www.huweihuang.com 2017-2018 all right reserved，powered by GitbookUpdated at 2023-03-05 20:18:39 "}}